# Generated from Decaf.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2*")
        buf.write("\u00ee\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25")
        buf.write("\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37")
        buf.write("\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3$\3")
        buf.write("$\3%\3%\3%\3%\3%\3%\3&\3&\3\'\3\'\3(\3(\3(\7(\u00d8\n")
        buf.write("(\f(\16(\u00db\13(\3)\3)\7)\u00df\n)\f)\16)\u00e2\13)")
        buf.write("\3*\3*\3*\3*\3+\6+\u00e9\n+\r+\16+\u00ea\3+\3+\2\2,\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\2M\2O\'")
        buf.write("Q(S)U*\3\2\5\5\2C\\aac|\3\2\62;\5\2\13\f\16\17\"\"\2\u00ef")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\3W\3\2\2")
        buf.write("\2\5]\3\2\2\2\7_\3\2\2\2\ta\3\2\2\2\13c\3\2\2\2\re\3\2")
        buf.write("\2\2\17g\3\2\2\2\21n\3\2\2\2\23r\3\2\2\2\25w\3\2\2\2\27")
        buf.write("\177\3\2\2\2\31\u0084\3\2\2\2\33\u0086\3\2\2\2\35\u0088")
        buf.write("\3\2\2\2\37\u008a\3\2\2\2!\u008d\3\2\2\2#\u0092\3\2\2")
        buf.write("\2%\u0098\3\2\2\2\'\u009f\3\2\2\2)\u00a1\3\2\2\2+\u00a3")
        buf.write("\3\2\2\2-\u00a5\3\2\2\2/\u00a7\3\2\2\2\61\u00a9\3\2\2")
        buf.write("\2\63\u00ab\3\2\2\2\65\u00ad\3\2\2\2\67\u00af\3\2\2\2")
        buf.write("9\u00b1\3\2\2\2;\u00b3\3\2\2\2=\u00b6\3\2\2\2?\u00b9\3")
        buf.write("\2\2\2A\u00bc\3\2\2\2C\u00bf\3\2\2\2E\u00c2\3\2\2\2G\u00c5")
        buf.write("\3\2\2\2I\u00ca\3\2\2\2K\u00d0\3\2\2\2M\u00d2\3\2\2\2")
        buf.write("O\u00d4\3\2\2\2Q\u00dc\3\2\2\2S\u00e3\3\2\2\2U\u00e8\3")
        buf.write("\2\2\2WX\7e\2\2XY\7n\2\2YZ\7c\2\2Z[\7u\2\2[\\\7u\2\2\\")
        buf.write("\4\3\2\2\2]^\7}\2\2^\6\3\2\2\2_`\7\177\2\2`\b\3\2\2\2")
        buf.write("ab\7=\2\2b\n\3\2\2\2cd\7]\2\2d\f\3\2\2\2ef\7_\2\2f\16")
        buf.write("\3\2\2\2gh\7u\2\2hi\7v\2\2ij\7t\2\2jk\7w\2\2kl\7e\2\2")
        buf.write("lm\7v\2\2m\20\3\2\2\2no\7k\2\2op\7p\2\2pq\7v\2\2q\22\3")
        buf.write("\2\2\2rs\7e\2\2st\7j\2\2tu\7c\2\2uv\7t\2\2v\24\3\2\2\2")
        buf.write("wx\7d\2\2xy\7q\2\2yz\7q\2\2z{\7n\2\2{|\7g\2\2|}\7c\2\2")
        buf.write("}~\7p\2\2~\26\3\2\2\2\177\u0080\7x\2\2\u0080\u0081\7q")
        buf.write("\2\2\u0081\u0082\7k\2\2\u0082\u0083\7f\2\2\u0083\30\3")
        buf.write("\2\2\2\u0084\u0085\7*\2\2\u0085\32\3\2\2\2\u0086\u0087")
        buf.write("\7.\2\2\u0087\34\3\2\2\2\u0088\u0089\7+\2\2\u0089\36\3")
        buf.write("\2\2\2\u008a\u008b\7k\2\2\u008b\u008c\7h\2\2\u008c \3")
        buf.write("\2\2\2\u008d\u008e\7g\2\2\u008e\u008f\7n\2\2\u008f\u0090")
        buf.write("\7u\2\2\u0090\u0091\7g\2\2\u0091\"\3\2\2\2\u0092\u0093")
        buf.write("\7y\2\2\u0093\u0094\7j\2\2\u0094\u0095\7k\2\2\u0095\u0096")
        buf.write("\7n\2\2\u0096\u0097\7g\2\2\u0097$\3\2\2\2\u0098\u0099")
        buf.write("\7t\2\2\u0099\u009a\7g\2\2\u009a\u009b\7v\2\2\u009b\u009c")
        buf.write("\7w\2\2\u009c\u009d\7t\2\2\u009d\u009e\7p\2\2\u009e&\3")
        buf.write("\2\2\2\u009f\u00a0\7?\2\2\u00a0(\3\2\2\2\u00a1\u00a2\7")
        buf.write("\60\2\2\u00a2*\3\2\2\2\u00a3\u00a4\7/\2\2\u00a4,\3\2\2")
        buf.write("\2\u00a5\u00a6\7#\2\2\u00a6.\3\2\2\2\u00a7\u00a8\7-\2")
        buf.write("\2\u00a8\60\3\2\2\2\u00a9\u00aa\7,\2\2\u00aa\62\3\2\2")
        buf.write("\2\u00ab\u00ac\7\61\2\2\u00ac\64\3\2\2\2\u00ad\u00ae\7")
        buf.write("\'\2\2\u00ae\66\3\2\2\2\u00af\u00b0\7>\2\2\u00b08\3\2")
        buf.write("\2\2\u00b1\u00b2\7@\2\2\u00b2:\3\2\2\2\u00b3\u00b4\7>")
        buf.write("\2\2\u00b4\u00b5\7?\2\2\u00b5<\3\2\2\2\u00b6\u00b7\7@")
        buf.write("\2\2\u00b7\u00b8\7?\2\2\u00b8>\3\2\2\2\u00b9\u00ba\7?")
        buf.write("\2\2\u00ba\u00bb\7?\2\2\u00bb@\3\2\2\2\u00bc\u00bd\7#")
        buf.write("\2\2\u00bd\u00be\7?\2\2\u00beB\3\2\2\2\u00bf\u00c0\7(")
        buf.write("\2\2\u00c0\u00c1\7(\2\2\u00c1D\3\2\2\2\u00c2\u00c3\7~")
        buf.write("\2\2\u00c3\u00c4\7~\2\2\u00c4F\3\2\2\2\u00c5\u00c6\7v")
        buf.write("\2\2\u00c6\u00c7\7t\2\2\u00c7\u00c8\7w\2\2\u00c8\u00c9")
        buf.write("\7g\2\2\u00c9H\3\2\2\2\u00ca\u00cb\7h\2\2\u00cb\u00cc")
        buf.write("\7c\2\2\u00cc\u00cd\7n\2\2\u00cd\u00ce\7u\2\2\u00ce\u00cf")
        buf.write("\7g\2\2\u00cfJ\3\2\2\2\u00d0\u00d1\t\2\2\2\u00d1L\3\2")
        buf.write("\2\2\u00d2\u00d3\t\3\2\2\u00d3N\3\2\2\2\u00d4\u00d9\5")
        buf.write("K&\2\u00d5\u00d8\5K&\2\u00d6\u00d8\5M\'\2\u00d7\u00d5")
        buf.write("\3\2\2\2\u00d7\u00d6\3\2\2\2\u00d8\u00db\3\2\2\2\u00d9")
        buf.write("\u00d7\3\2\2\2\u00d9\u00da\3\2\2\2\u00daP\3\2\2\2\u00db")
        buf.write("\u00d9\3\2\2\2\u00dc\u00e0\5M\'\2\u00dd\u00df\5M\'\2\u00de")
        buf.write("\u00dd\3\2\2\2\u00df\u00e2\3\2\2\2\u00e0\u00de\3\2\2\2")
        buf.write("\u00e0\u00e1\3\2\2\2\u00e1R\3\2\2\2\u00e2\u00e0\3\2\2")
        buf.write("\2\u00e3\u00e4\7)\2\2\u00e4\u00e5\5K&\2\u00e5\u00e6\7")
        buf.write(")\2\2\u00e6T\3\2\2\2\u00e7\u00e9\t\4\2\2\u00e8\u00e7\3")
        buf.write("\2\2\2\u00e9\u00ea\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb")
        buf.write("\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ed\b+\2\2\u00ed")
        buf.write("V\3\2\2\2\7\2\u00d7\u00d9\u00e0\u00ea\3\2\3\2")
        return buf.getvalue()


class DecafLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    ID = 37
    NUM = 38
    CHAR = 39
    SPACES = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'{'", "'}'", "';'", "'['", "']'", "'struct'", "'int'", 
            "'char'", "'boolean'", "'void'", "'('", "','", "')'", "'if'", 
            "'else'", "'while'", "'return'", "'='", "'.'", "'-'", "'!'", 
            "'+'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", "'=='", 
            "'!='", "'&&'", "'||'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "CHAR", "SPACES" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "LETTER", "DIGIT", 
                  "ID", "NUM", "CHAR", "SPACES" ]

    grammarFileName = "Decaf.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


